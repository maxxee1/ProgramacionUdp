Maxxee
eldiosjamshaa
Online

matiasjeje ‚Äî 06/04/2023 6:19 PM
donde tan skkdkd
Maxxee ‚Äî 06/04/2023 6:26 PM
aca
https://discord.gg/5R2XaQwq
matiasjeje ‚Äî 06/04/2023 6:27 PM
talawea
yia
vale
Maxxee ‚Äî 06/04/2023 6:56 PM
https://sence.gob.cl/personas/noticias/973450-personas-migrantes-trabajan-actualmente-en-chile#:~:text=El%20comercio%20es%20el%20principal,%2C4%%20del%20total%20nacional.
973.450 personas migrantes trabajan actualmente en Chile | SENCE
En el marco de la conmemoraci√≥n del D√≠a Internacional del Migrante (18 de diciembre), la red de Observatorios Laborales del Sence -que en la II Regi√≥n es ejecutado por la Universidad Cat√≥lica del Norte- caracteriz√≥, en su bolet√≠n mensual, a este grupo de la poblaci√≥n en el mercado laboral. La Regi√≥n de Antofagasta concentra el 6% del total nacio...
Maxxee ‚Äî 08/09/2023 12:28 AM
https://discord.gg/BKEsuhny
matiasjeje ‚Äî 09/12/2023 11:41 AM
jugando visual studio code üò≥
Maxxee ‚Äî 09/12/2023 11:41 AM
sksehfss,mdsd,mds
matiasjeje ‚Äî Yesterday at 10:56 PM
S√≠, con los cambios implementados en el archivo .handlebars, el index.js, y en las consultas SQL, se cumplen los siguientes puntos:

Cantidad y detalle de los productos: En el carrito, se despliega la lista de productos con nombre, cantidad (editable), y detalles relevantes de cada art√≠culo.
Precio total a pagar: Se calcula y muestra el total del carrito en el bloque de resumen.
Bot√≥n para realizar la compra: Hay un bot√≥n que redirige a la p√°gina de pago, iniciando el proceso de compra.
Con esta estructura y funcionalidades, el carrito est√° listo para usarse y cumple con los requisitos b√°sicos esperados.
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Carrito</title>
Expand
carrito.handlebars
3 KB
import { neon } from '@neondatabase/serverless';
import jwt from 'jsonwebtoken';
import cookieParser from 'cookie-parser';
import express from 'express';
import { engine } from 'express-handlebars';
import bcrypt from 'bcryptjs';
Expand
index.js
12 KB
Tabla para almacenar los carritos por usuario
CREATE TABLE IF NOT EXISTS carts (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla para almacenar los productos en cada carrito
CREATE TABLE IF NOT EXISTS cart_items (
    id SERIAL PRIMARY KEY,
    cart_id INT REFERENCES carts(id),
    product_id INT REFERENCES products(id),
    quantity INT DEFAULT 1,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Maxxee ‚Äî Yesterday at 11:08 PM
app.get
app.post
matiasjeje ‚Äî Yesterday at 11:08 PM
/* ---------- Ver el Carrito ---------- /
app.get('/cart', authMiddleware, async (req, res) => {
  const userId = req.user.id;

  // Consulta productos del carrito del usuario actual
  const query = 
    SELECT p.id, p.name, p.price, c.quantity
    FROM cart AS c
    JOIN products AS p ON c.product_id = p.id
    WHERE c.user_id = $1;
  ;
  const cartItems = await sql(query, [userId]);

  // Calcula el total
  const totalAmount = cartItems.reduce((sum, item) => sum + item.price item.quantity, 0);

  res.render('carrito', { cartItems, totalAmount });
});

/* ---------- Agregar Producto al Carrito ---------- /
app.post('/cart/add', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const productId = req.body.product_id;
  const quantity = req.body.quantity || 1;

  const query = 
    INSERT INTO cart (user_id, product_id, quantity)
    VALUES ($1, $2, $3)
    ON CONFLICT (user_id, product_id)
    DO UPDATE SET quantity = cart.quantity + $3;
  ;

  await sql(query, [userId, productId, quantity]);
  res.redirect('/cart');
});

/ ---------- Actualizar Cantidad en el Carrito ---------- /
app.post('/cart/update/:productId', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const productId = req.params.productId;
  const quantity = req.body.quantity;

  const query = 
    UPDATE cart SET quantity = $1
    WHERE user_id = $2 AND product_id = $3;
  ;

  await sql(query, [quantity, userId, productId]);
  res.redirect('/cart');
});

/ ---------- Eliminar Producto del Carrito ---------- */
app.post('/cart/delete/:productId', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const productId = req.params.productId;

  const query = 
    DELETE FROM cart WHERE user_id = $1 AND product_id = $2;
  ;

  await sql(query, [userId, productId]);
  res.redirect('/cart');
});
/* ---------- Ver el Carrito ---------- */
app.get('/cart', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  
  // Consulta productos del carrito del usuario actual
  const query = `
Expand
a.txt
2 KB
Maxxee ‚Äî Today at 9:55 PM
como se debe llamar el archivo ? carrito?
Ôªø
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Carrito</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

  <!-- Encabezado -->
  <header class="container mt-5">
    <h2>Tu Carrito</h2>
  </header>

  <!-- Lista de productos en el carrito -->
  <main class="container mt-4">
    {{#if cartItems.length}}
      <table class="table">
        <thead>
          <tr>
            <th>Producto</th>
            <th>Cantidad</th>
            <th>Precio Unitario</th>
            <th>Total</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {{#each cartItems}}
            <tr>
              <td>{{this.name}}</td>
              <td>
                <form action="/cart_items/update/{{this.id}}" method="POST" class="d-inline">
                  <input type="number" name="quantity" value="{{this.quantity}}" min="1" class="form-control form-control-sm d-inline w-50">
                </form>
              </td>
              <td>${{this.price}}</td>
              <td>${{multiply this.price this.quantity}}</td>
              <td>
                <button form="updateQuantity" class="btn btn-sm btn-primary">Actualizar</button>
                <form action="/cart_items/delete/{{this.id}}" method="POST" class="d-inline">
                  <button type="submit" class="btn btn-sm btn-danger">Eliminar</button>
                </form>
              </td>
            </tr>
          {{/each}}
        </tbody>
      </table>

      <!-- Resumen del carrito -->
      <div class="text-end mt-4">
        <h4>Total a pagar: ${{totalAmount}}</h4>
        <form action="/checkout" method="POST">
          <button type="submit" class="btn btn-success">Proceder al Pago</button>
        </form>
      </div>
    {{else}}
      <p class="mt-4">Tu carrito est√° vac√≠o.</p>
    {{/if}}
  </main>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
carrito.handlebars
3 KB